#+TITLE:Process modeling with BPMN
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE: Data modeling seminar 482.02 Fall 2021
#+STARTUP: overview
#+OPTIONS: toc:1 num:nil ^:nil
#+INFOJS_OPT: :view:info
* What will you learn?

  * Business Process Model and Notation
  * Object-oriented process modeling
  * Practice in the Signavio Process Editor

* BPMN object summary

  Business Process Model and Notation (BPMN) 2.0 has four main groups
  of shapes or objects. Source: [[lucidchart][Lucidchart, 2020]].

** Flow objects (Action/Decision)

   #+attr_html: :width 400px
   [[./img/flow.png]]

** Connecting objects (Communication)

   #+attr_html: :width 300px
   [[./img/connecting.png]]

** Participants (Roles/Accountability)

   #+attr_html: :width 350px
   [[./img/pools.png]]

** Artifacts (Details)

   #+attr_html: :width 400px
   [[./img/artifacts.png]]

   * Groups
   * Documents
   * Annotation
   * Message (data)

** More information

   For Signavio Process Manager, open the "Getting started" sidebar
   inside the Process Manager explorer window under "Help".

   #+attr_html: :width 600px
   [[./img/signavio.png]]

   [[https://documentation.signavio.com/suite/en-us/Content/process-manager/userguide/bpmn/modeling.htm][This Signavio document]] gives a complete, structured account of all
   the most relevant aspects of BPMN with many examples (SAP Signavio,
   2021).

   [[https://camunda.com/bpmn/reference/][This guide from Camunda]] (with link to a free BPMN online editor),
   is also very good and complete.

* BPMN case studies
** Eating icecream

   Creating and explaining this model takes about as much time as
   eating a big icecream (7 min) - [[https://youtu.be/BwkNceoybvA?t=346][Link]].

   #+attr_html: :width 600px
   [[./img/icecream.png]]

** Job application process

   Part 1: demonstration of creating a simple BPMN workflow for an
   application process. The software used here is irrelevant - you're
   still using the BPMN standard and you can recreate these models in
   a process modeling editor of your choice - bpmn.io, signavio, ARIS
   or even MS Visio will do. Source: Aptero Solutions, 2011.

   Youtube: https://youtu.be/WtOzW8Ck5LY

   Part 2: in this demonstration, which follows on part 1, you see how
   to implement the concept of multiple pools and message flow across
   pools using the same example as before, an application process. The
   process participants involved are: the applicant and the HR
   department of a company. Source: Aptero Solutions, 2011.

   Youtube: https://youtu.be/B5H2K8wcBGU

** IT service

   This example is (for now) only available in German.

   Video: [[https://youtu.be/kYK9t8fPkAY][BPMN 2.0 Prozessmodell in Signavio erzeugen.]]


   #+attr_html: :width 400px
   [[./img/german.png]]

* Pizza example

** Choreography

   #+attr_html: :width 600px
   [[./img/choreography.png]]

** Collaboration

   #+attr_html: :width 600px
   [[./img/collaboration.png]]

** Enterprise modeling with BPMN

   [[https://github.com/birkenkrahe/mod482/blob/main/10_bpmn/bpmn_modeling.pdf][GitHub: Enterprise Modeling with BPMN (PDF)]]

   #+attr_html: :width 600px
   [[./img/presentation.png]]

* Practice I

  #+attr_html: :width 300px
  [[./img/practice.gif]]

** BPMN rules

   [[./img/summary.gif]]

   | NO. | BPMN MODELING RULE                                          |
   |-----+-------------------------------------------------------------|
   |   1 | Every participant gets a pool or a lane inside a pool       |
   |   2 | Every pool contains exactly one process                     |
   |   3 | A process has at least one start and one end event          |
   |   4 | Sequence flow (Action) flows only within pools              |
   |   5 | Message flow (Communication) flows only between pools       |
   |   6 | All process elements must be named                          |
   |   7 | Decision points (exclusive gateways) have questions         |
   |   8 | Actors with little to do can become additional participants |
   |   9 | Split or joined sequence flows need gateways                |
   |  10 | Opened gateways must be closed                              |

   BPMN has slightly different rules than EPC. In addition, because
   it is primarily (though not only - see process mining and BPEL)
   for human consumption, the style of a diagram carries extra weight:

   | BPMN diagrams should be readable                   |
   | BPMN diagrams can be infinite in size              |
   | BPMN diagrams run from the left to the right       |
   | BPMN diagrams avoid loops (instead: attributes)    |
   | BPMN diagrams distinguish action and communication |

   Here is a complete EPC "cheat sheet" (Source: SAP Signavio)

   #+attr_html: :width 600px
   [[./img/bpmn.png]]

** BPMN diagram with mistakes
*** Problem
    Which rule violations can you see in the following diagram
    (GitHub)? The total number is[fn:6] = 8 errors - I count a total of
    11 additional rule violations. So the total is closer to 20.

    #+attr_html: :width 600px
    [[./img/error.png]]

*** Solution

    #+attr_html: :width 600px
    [[./img/error_solution.png]]

    1. Pool name must be actor or organization
    2. Between pools only message flows
    3. Collapsed pool needs a name
    4. Whole process must be inside pool
    5. Inside pools only sequence flows
    6. Only one start event per pool
    7. Only one end event per pool
    8. Default flow only after exclusive gateway
    9. Bi-directional association serves no purpose here
    10. "No" as flow title, and question at exclusive gateway missing
    11. Receiving intermediate message event wrongly named
    12. Task name missing
    13. End event name missing
    14. Sending end event neds to send something
    15. Need gateway here (flow splits)
    16. Start event need title
    17. Task needs title
    18. Task needs title
    19. Artifact needs title
    20. Swimline needs title

** Assignment (complete by Nov 2, 2.30 pm)

   #+attr_html: :width 400px
   [[./img/h5p.png]]

   * Review the rules using [[https://h5p.org/node/1138751][this online lesson]] (https://h5p.org/node/1138751)
   * Complete the summary quiz at the end of the lesson.
   * Watch both videos at the end (~Job application~, 20 min)
   * Rebuild the diagram in Signavio as a ~new>>BPMN 2.0 diagram~
     while you watch
   * Save them in your personal folder in ~Shared Documents~
   * Share the diagram with me using the ~Share>>Invite for feedback~ tab
   * Enter ~birkenkrahe@lyon.edu~ and check ~Send a copy to me~ for
     proof - as shown in the image.

     [[./img/share.png]]

* Practice II - model simple processes

  #+attr_html: :width 300px
  [[./img/practice2.gif]]

** Written BPMN test on November 4 at 2.30 pm

   Topics:
   * BPMN objects
   * BPMN rules and rule violations
   * BPMN workflow

** Assignment: Job application process
*** Problem
    * Review the rules using this online lesson
      (https://h5p.org/node/1138751)
    * Complete the summary quiz at the end of the lesson.
    * Watch both videos at the end ("Job application", 20 min)
    * Rebuild the diagram for the *Applicant* only (= 1 pool) in
      Signavio as a BPMN 2.0 diagram while you watch the first
      video. For the second video, rebuild only the diagram that is
      finished after 7 minutes* (= complete applicant process with
      message flows to the collapsed recruiter pool).
    * I made [[https://youtu.be/l6-fCtOXin4][this short screencast]] to help you get started.
    * Save the diagram in your personal folder in "Shared Documents"
    * Share the diagram with me using the "Share>>Invite for feedback"
      tab
    * Enter "birkenkrahe@lyon.edu" and check "Send a copy to me" for
      proof (as shown below)

    *) the complete model that is shown is unfortunately not very
    good. I'll share my complete, rule-compliant solution with you in
    class. Though BPMN 2.0 did exist in 2011, the diagram owes too much to
    version 1.0.
*** Solution
**** Applicant - happy path process
     ([[https://academic.signavio.com/p/editor?id=86d64600d0624b6cb17d7d81d2ef9bb5][Signavio]])

     #+attr_html: :width 600px
     [[./img/app1.png]]

**** Applicant - complete process
     ([[https://academic.signavio.com/p/editor?id=d82bf0c4c92248e89874950b78ff23b0][Signavio]])

     | Above: model in video       |
     | Below: rule compliant model |

     #+attr_html: :width 600px
     [[./img/app2.png]]

**** Recruiter - happy path process
     ([[https://academic.signavio.com/p/editor?id=2ff1f18657664833af590c6fc7aefbfc][Signavio]])

     #+attr_html: :width 600px
     [[./img/app3.png]]

**** Applicant and recruiter - happy path process
     ([[https://academic.signavio.com/p/editor?id=8ce1e76269aa48a3a7d646f29b3caebd][Signavio]])

     #+attr_html: :width 600px
     [[./img/app4.png]]

**** Recruiter - complete process
     ([[https://academic.signavio.com/p/editor?id=39830914287c4e658b5bf49584ba1c58][Signavio]])

     | Above: model in video       |
     | Below: rule compliant model |

     #+attr_html: :width 600px
     [[./img/app5.png]]

**** Applicant (complete process) / Recruiter (collapsed process)
     ([[https://academic.signavio.com/p/editor?id=3be88a96f306465cbb6a0dc486e0f726][Signavio]])

     #+attr_html: :width 600px
     [[./img/app6.png]]

**** Applicant and recruiter - complete collaborative process
     ([[https://academic.signavio.com/p/editor?id=e377cc9506544985b3c4978347b72f64][Signavio]])

     #+attr_html: :width 600px
     [[./img/app7.png]]
** Assignment: Build your first own BPMN diagram
*** Problem
    Here is my (recommended) BPMN modeling workflow.

    | NO. | STEP                                       | ACTION           |
    |-----+--------------------------------------------+------------------|
    |   1 | Who are the actors (organizational units)? | Pools and lanes  |
    |   2 | What are the start and end events?         | Gather them      |
    |   3 | Which other events or tasks are there?     | Gather them      |
    |   4 | Is there any communication?                | Add message flow |
    |   5 | What is the happy path?                    | Model it         |
    |   6 | Can any events or tasks be parallelized?   | Add gateways     |
    |   7 | Which decisions or changes are involved?   | Add gateways     |
    |   8 | Anything else?                             | Add it           |
    |   9 | Check model                                | Spell checker    |
    |  10 | Save and share model diagram               | Save and share   |

    * Turn this workflow into a BPMN diagram. It begins with the start
      event "Modeling begins"
    * You should at least complete the happy path model. If you're up
      to it, add gateway points (identify where gateways may be placed)
    * Make sure you save the happy path model before creating a more
      detailed model
    * Save the diagram(s) in your personal folder in Shared Documents
    * Share the diagram with me using the "Share>>Invite to edit" tab
*** Solution


    #+attr_html: :width 600px
    [[./img/workflow.png]]
** Convert an EPC to a BPMN diagram
*** Problem
    You saw this diagram [[https://github.com/birkenkrahe/mod482/tree/main/9_modeling_epc#flow][in the lecture on modeling and EPCs]].

    #+attr_html: :width 400px
    [[./img/convert.png]]

    Unfortunately, this diagram violates an EPC rule. Can you tell
    which one? I've cleaned it up (also avoiding the loop but
    retaining all the important information) in the diagram
    below. Convert this diagram into a BPMN 2.0 diagram!

    For simplicity use only BPMN 2.0 *core* elements (i.e. no
    intermediate events). But you can overload tasks with a ~loop~
    attribute and set a ~loop maximum~ value by opening the
    ~Attributes|Views~ sidepanel on the right side of the editor.

    #+attr_html: :width 400px
    [[./img/convert1.png]]

*** Solution

    Solution 1 is a straigthforward translation:
    * The Organizational Unit ~User~ becomes a pool
    * The events are replaced by gateway outflows
    * The process interface is integrated in the process (this has the
      advantage that the diagram shows the escalation structure
      clearly).
    * If more than one wrong password entry is allowed, the diagram
      must be expanded. That's a limitation.

      #+attr_html: :width 400px
      [[./img/login.png]]

    Solution 2 deals with this limitation: the ~Enter password~ task
    is looped. A loop parameter (~loop maximum~) is set and can be
    changed. Now the diagram is generalized.

    #+attr_html: :width 400px
    [[./img/login1.png]]


** Car purchase process
*** Problem

    Model the following process using BPMN 2.0:

    #+begin_quote
    A customer wants to buy a car. He goes to a car dealer to pick a
    car. The dealer has several new, and one used car available. The
    customer picks one, pays for the car, and leaves. She's happy now!
    #+end_quote

    /Tip: you don't need two pools for this process, because the
    dealer doesn't have much to do./

** Practice session process
*** Problem
    Model the following process using BPMN 2.0:

    #+begin_quote
    The professor demonstrates the modeling language BPMN. After the
    demonstration, he assigns an exercise to the students. Once the
    assignment is completed, the student submits the solution. The
    professor checks the result before ending the class.
    #+end_quote

    /Tip: model the professor first, then add the student as a second
    pool./

** Supply chain process
*** Problem
    Model the following supply chain process using BPMN 2.0:

    #+begin_quote
    The process begins with a material purchase request, the Resource
    Manager issues a material requisition. Next, Purchasing issues a
    purchase order for the requested material. When the receipt of the
    purchased items has been received by the Resource Manager, the
    Warehouse inspects the items. Now, Accounting processes the
    vendor’s invoice and the purchase process is finished.
    #+end_quote

    /Tip: think about the number of lanes or pools that you need./

* Modeling a system

  This example motivates the use of UML over EPCs and BPMN.
  
** Understand the problem

   Convert the design of a "simple reflex agent" (like a vacuum robot,
   from [[aima][AIMA]]) into a standardized process model. Use either EPCs or
   BPMN 2.0. Your input: pseudocode + non-standard diagram.

   This agent acts according to a ~rule~ whose condition matches the
   current ~state~, as defined by the ~percept~ (input signals).

   Pseudocode:
   #+attr_html: :width 450px
   [[./img/simplecode.png]]

   Figure:
   #+attr_html: :width 450px
   [[./img/simple.png]]

** Create the model

   This BPMN model is based on the pseudocode more than on the
   diagram:

   #+attr_html: :width 600px
   [[./img/simplebpmn.png]]

   This BPMN model is based on the diagram more than on the
   pseudocode:

   #+attr_html: :width 400px
   [[./img/simplebpmn1.png]]

** Run a simulation

   One of the tests for a good model is to run a "simulation": go
   through the process with known input values and obtain known output
   values. This is the same procedure used to e.g. improve machine
   learning models during training and testing phases.

   Here is an example ~percept~/~action~ sequence for a vacuum robot
   whose ~world~ consists of two adjacent areas A and B that are
   either dirty or clean:

   | ~percept~             | ~action~ | Interpretation                           |
   |-----------------------+----------+------------------------------------------|
   | ~[A,dirty]~           | ~suck~   | Area ~A~ is ~dirty~, ~suck~ to clean     |
   | ~[A,clean]~           | ~right~  | Area ~A~ is ~clean~, move ~right~ to ~B~ |
   | ~[B,dirty]~           | ~suck~   | Area ~B~ is ~dirty~, ~suck~ to clean     |
   | ~[B,clean]~           | ~left~   | Area ~B~ is ~clean~, move ~left~ to ~A~  |
   | ~[A,clean],[A,clean]~ | ~right~  | Do nothing, then move ~right~            |
   | ~[A,clean],[A,dirty]~ | ~suck~   | Do nothing, then ~suck~                  |

   The table continues ad infinitum with arbitrarily long ~precept~
   sequences.

* References

  <<aima>> Russell/Norvig (2021). AI - A Modern
  Approach. Pearson. [[http://aima.cs.berkeley.edu/][URL: berkeley.edu]].

  <<lucidchart>> Lucidchart (Apr 28, 2020). Business Process Model and
  Notation (BPMN) 2.0 Tutorial [video]. [[https://youtu.be/BwkNceoybvA][Online: youtube.com]].

  <<signavio>> SAP Signavio Process editor version 15.7.1. SAP
  (2021). Academic edition [platform]. Online: [[https://www.signavio.com/][www.signavio.com.]]

  <<tutor>> SAP Signavio (n.d.). BPMN modeling [website]. [[https://documentation.signavio.com/suite/en-us/Content/process-manager/userguide/bpmn/modeling.htm][Online:
  signavio.com]]

* Footnotes

[fn:7]The second XOR operator has not two but three outgoing events,
and the flow splits without an operator. The third event was put in so
that the loop does not become infinite in case the wrong password is
entered more than twice. The problem is that an event has been
forgotten: "wrong password entered" vs. "correct password entered".

[fn:6]According to the Signavio "spell checker" for BPMN 2.0 diagrams.

[fn:5]The idea for this problem came from a figure in a book I'm
reading, "Tiny C Projects" ([[gookin][Gookin, 2021]]):
#+attr_html: :width 500px
[[./img/cycle.png]]

[fn:4]Business processes generate added value.

[fn:3]Different languages use different terms:(1)
*Functions*/tasks/actions/activities; (2) *events*/status/trigger; (3)
*flow*/path/sequence/connectors; (4) *operators*/gateways/decisions.

[fn:2]Any productive ERP system contains many more transactions than
that. In practice, these are often modeled as BPMN diagrams, or as ER
Diagrams, if customer-facing or database operations are being
modeled. For more about ERP systems, see this tutorial ([[sap][SAP]]).

[fn:1]Cp. ITIL library of IT processes, especially with regards
to IT services. More: [[wiki][Wikipedia]] (2021).

#+attr_html: :width 600px
[[./img/itil.jpg]]
/Image source: ITIL docs, 2021/
