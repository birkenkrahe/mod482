#+TITLE:Modeling systems with UML
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE: Data modeling seminar 482.02 Fall 2021
#+STARTUP: overview
#+OPTIONS: toc:1 num:nil ^:nil
#+INFOJS_OPT: :view:info
* UNDER CONSTRUCTION

  [[./img/underconstruction.gif]]

* What will you learn?

  * What is UML?
  * What are the main UML diagrams?
  * What are use case diagrams?
  * UML case study (airport systems)
  * UML practice (use case only)

* What is UML?

** UML vs. Flowcharts vs. EPC vs. BPMN

   | Diagram    | Purpose                          | Example                     | Where       |
   |------------+----------------------------------+-----------------------------+-------------|
   | Flowcharts | Model flow                       | Programming loop            | Programming |
   | EPC        | Model transactions               | Credit card check           | Bank        |
   | BPMN       | Model process with communication | IT support communication    | IT Service  |
   | UML        | Model systems and processes      | Infrastructure and services | Airport     |

   In UML, one can also model static systems (without flow).

** How UML came about

   | Time frame  | Paradigm                    | Problem           | Solution         |
   |-------------+-----------------------------+-------------------+------------------|
   | Until 1970s | Software creation is an art | Complexity crisis | Engineering      |
   | Until 1980s | Split data and procedures   | Fragmentation     | ERD / Petri Nets |
   | Until 1990s | Object orientation          | Reusability       | UML 0.9[fn:1]    |
   | Since 2005  | Integrated modeling         | Standardisation   | UML 2.0 (OMG)[fn:2]    |

** UML diagram overview

   * Video: [[https://youtu.be/WnMQ8HlmeXc][UML Diagrams Full Course]] ([[video][freeCodeCamp.org, 2021]])

   #+attr_html: :width 600px
   [[./img/uml.png]]

*** Structure diagrams

    | STRUCTURE DIAGRAMS          | WHAT IS IT                                                                                                    | EXAMPLE                             |
    |-----------------------------+---------------------------------------------------------------------------------------------------------------+-------------------------------------|
    | Class diagram               | Classes, types, interfaces, and the relationships between them                                                | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/class.png][Order processing system]]             |
    | Component diagram           | Structural relationship of software components                                                                | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/component.png][Automatic Teller Machine (ATM)]]      |
    | Deployment diagram          | Hardware and software across multiple machines                                                                | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/deployment.png][Hospital management system]]          |
    | Object (instance) diagram   | Object instances of the classes defined in class diagrams in configurations that are important to your system | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/object.jpg][Order processing system (with data)]] |
    | Package diagram             | Dependencies between software packages                                                                        | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/package.jpg][Invoicing]]                           |
    | Profile diagram             | Customize UML to your case using ~<<stereotype>>~                                                             | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/profile.png][Server classes]]                      |
    | Composite structure diagram | Internal structure of classes                                                                                 | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/composite.jpg][School class]]                        |

*** Behavior diagrams

    | BEHAVIOR DIAGRAMS                     | WHAT IS IT                                                                                                                      | EXAMPLE         |
    |---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+-----------------|
    | Use case diagram                      | Interactions between your system and users or other external systems. Helpful to map requirements.                              | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/usecase.jpg][Travel agency]]   |
    | Activity diagram                      | Sequential and parallel activities within your system (functions)                                                               | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/activity.jpg][Enter PIN]]       |
    | State machine diagram                 | Object behavior states (events)                                                                                                 | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/state.png][Game states]]     |
    | Sequence diagram                      | Interactions between objects where the order of the interactions is important                                                   | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/sequence.png][ATM scenario]]    |
    | Communication (collaboration) diagram | The ways in which objects interact and the connections that are needed to support that interaction                              | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/communication.jpg][Contact manager]] |
    | Timing diagram                        | Interactions between objects where timing is an important concern                                                               | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/timing.png][Car park]]        |
    | Interaction overview diagram          | Used to collect sequence, communication, and timing diagrams to capture an important interaction that occurs within your system | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/interaction.png][Online shopping]] |

** Case study: airport

   Some services in an airport:

   #+attr_html: :width 400px
   [[./img/airport.png]]


   Three relevant models:
   1) Business system model (passenger services)
   2) IT systems model (enabling passenger services)
   3) System integration model (interacting IT systems)

   #+attr_html: :width 400px
   [[./img/airport1.png]]

   8 diagram types used to model the whole airport ([[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/airport.pdf][PDF]]):

   #+attr_html: :width 400px
   [[./img/airport2.png]]

*** Use case diagram

    Issuing a boarding pass

    #+attr_html: :width 400px
    [[./img/airport_usecase.png]]



* Use case diagrams

* Practice

* References

  <<uml>> Miles/Hamilton: Learning UML 2.0. O'Reilly (2006). ISBN:
  9780596009823. URL: [[https://www.oreilly.com/library/view/learning-uml-20/0596009828/][URL: oreilly.com.]]

  <<packt>> Graessle/Baumann/Baumann: UML 2.0 in Action - a
  Project-based Tutorial. Packt Publishing
  (2005). ISBN: 9781904811558. URL: [[https://www.packtpub.com/product/uml-2-0-in-action-a-project-based-tutorial/9781904811558][URL: packtpub.com]].

  <<omg>> Object Management Group: Unified Modeling Language
  Specifications [website]. [[https://www.omg.org/spec/UML/2.5.1/About-UML/][URL: omg.org.]]

  <<video>> freeCodeCamp.org (21 Apr 2021). UML Diagrams Full Course
  (Unified Modeling Language) [video]. [[https://youtu.be/WnMQ8HlmeXc][URL: youtu.be/WnMQ8HlmeXc.]]

  <<creately>> Creately.com (10 Sept 2021). UML Diagram Types Guide:
  Learn about All Types of UML Diagrams with Examples [blog]. [[https://creately.com/blog/diagrams/uml-diagram-types-examples][URL:
  creately.com]].

* Footnotes

[fn:2]Since 2017: UML 2.5.1 ([[omg][OMG]])

[fn:1]
#+begin_example
UML 0.9 =
+ Booch Method (Grady Booch)
+ Object Modeling Technique (James Rumbaugh)
+ Object-Oriented Software Engineering (Ivar Jacobsen)
+ Others
#+end_example
