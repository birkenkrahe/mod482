#+TITLE:Modeling systems with UML
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE: Data modeling seminar 482.02 Fall 2021
#+STARTUP: overview
#+OPTIONS: toc:1 num:nil ^:nil
#+INFOJS_OPT: :view:info
* What will you learn?

  * What is UML?
  * How do you use UML in practice?
  * What are the main UML diagrams?
  * What are use case diagrams?
  * UML case study (airport systems)
  * Use case diagrams (requirements analysis/outside view)
  * UML practice (use case only)

* What is UML?

** UML vs. Flowcharts vs. EPC vs. BPMN

   | Diagram    | Purpose                          | Example                     | Where       |
   |------------+----------------------------------+-----------------------------+-------------|
   | Flowcharts | Model flow                       | Programming loop            | Programming |
   | EPC        | Model transactions               | Credit card check           | Bank        |
   | BPMN       | Model process with communication | IT support communication    | IT Service  |
   | UML        | Model systems and processes      | Infrastructure and services | Airport     |

   In UML, one can also model static systems (without flow).

** How UML came about

   | Time frame  | Paradigm                    | Problem           | Solution         |
   |-------------+-----------------------------+-------------------+------------------|
   | Until 1970s | Software creation is an art | Complexity crisis | Engineering      |
   | Until 1980s | Split data and procedures   | Fragmentation     | ERD / Petri Nets |
   | Until 1990s | Object orientation          | Reusability       | UML 0.9[fn:1]    |
   | Since 2005  | Integrated modeling         | Standardisation   | UML 2.0 (OMG)[fn:2]    |

** How do you use UML?

   #+attr_html: :width 400px
   [[./img/use.gif]]

   | UML as a sketch               | Convey key points, then throw away                                                                                                                |
   | UML as a blueprint            | Detailed system specification. Use UML tool. Reverse and forward engineering to keep model in line with system. Turn portions of model into code. |
   | UML as a programming language | Go from UML model to executable code: every aspect of the system is modeled. Model enables deployment to different environments.                  |

*** Software engineering views

    /Image: [[https://en.wikipedia.org/wiki/4%2B1_architectural_view_model][Phillippe Kruchten's 4+1 view software engineering model]]/

    #+attr_html: :width 400px
    [[./img/kruchten.png]]

    | VIEW             | WHAT IS IT                                                                                                                                | UML Diagrams                              |
    |------------------+-------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------|
    | Logical view     | Abstract description of system's parts and their interactions (logic)                                                                     | class, object, state machine, interaction |
    | Process view     | Describes processes within the system and what might happen (simulation)                                                                  | activity                                  |
    | Development view | Describes how system's parts are organized into modules and components, and how they are layered (architecture)                           | package, component                        |
    | Physical view    | Describes how system is transferred to the real world (deployment)                                                                        | deployment                                |
    | Use case view    | Describes the system functionality from an outside perspective - what the system is supposed to do. Guides all other views (requirements) | use case, interaction overview            |

** UML diagram overview

   * Watch the video: [[https://youtu.be/WnMQ8HlmeXc][UML Diagrams Full Course]] ([[video][freeCodeCamp.org,
     2021]]) - especially the overview (first 10 minutes)

   #+attr_html: :width 600px
   [[./img/uml.png]]

*** Structure diagrams

    | STRUCTURE DIAGRAMS          | WHAT IS IT                                                                                                    | EXAMPLE                             |
    |-----------------------------+---------------------------------------------------------------------------------------------------------------+-------------------------------------|
    | Class diagram               | Classes, types, interfaces, and the relationships between them                                                | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/class.png][Order processing system]]             |
    | Component diagram           | Structural relationship of important components within your system                                            | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/component.png][Automatic Teller Machine (ATM)]]      |
    | Deployment diagram          | Hardware and software across multiple machines in a realworld situation                                       | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/deployment.png][Web application]]                     |
    | Object (instance) diagram   | Object instances of the classes defined in class diagrams in configurations that are important to your system | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/object.jpg][Order processing system (with data)]] |
    | Package diagram             | Dependencies between software packages and the hierarchical organization of groups of classes and components  | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/package.png][Web application]]                     |
    | Profile diagram             | Customize UML to your case using ~<<stereotype>>~                                                             | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/profile.png][Server classes]]                      |
    | Composite structure diagram | The internals of a class or component, and class relationships within a given context                         | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/composite.jpg][School class]]                        |

*** Behavior diagrams

    | BEHAVIOR DIAGRAMS                     | WHAT IS IT                                                                                                                      | EXAMPLE             |
    |---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------+---------------------|
    | Use case diagram                      | Interactions between your system and users or other external systems. Helpful to map requirements.                              | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/usecase.png][Broadcasting System]] |
    | Activity diagram                      | Sequential and parallel activities within your system (functions)                                                               | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/activity.jpg][Enter PIN]]           |
    | State machine diagram                 | The state of an object throughout its lifetime and the events that can change that state                                        | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/state.png][Game states]]         |
    | Sequence diagram                      | Interactions between objects where the order of the interactions is important                                                   | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/sequence.png][ATM scenario]]        |
    | Communication (collaboration) diagram | The ways in which objects interact and the connections that are needed to support that interaction                              | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/communication.png][Bank transaction]]     |
    | Timing diagram                        | Interactions between objects where timing is an important concern                                                               | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/timing.png][Car park]]            |
    | Interaction overview diagram          | Used to collect sequence, communication, and timing diagrams to capture an important interaction that occurs within your system | [[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/interaction.png][Online shopping]]     |

** Case study: airport

   Airports are complicated. Though it does not always go like this:
   watch the [[https://youtu.be/gWYTnc7m9mE][video]] of a 21st century public project scandal. ([[dw][DW 2020]])

   Some services in an airport:

   #+attr_html: :width 400px
   [[./img/airport.png]]

   Three relevant models:
   1) Business system model (passenger services)
   2) IT systems model (enabling passenger services)
   3) System integration model (interacting IT systems)

   #+attr_html: :width 400px
   [[./img/airport1.png]]

   8 diagram types used to model the whole airport ([[https://github.com/birkenkrahe/mod482/blob/main/11_uml/img/airport.pdf][PDF]]):

   #+attr_html: :width 400px
   [[./img/airport2.png]]


*** Use case diagrams: issuing a boarding pass

    First draft of the use case:

    #+attr_html: :width 400px
    [[./img/airport_usecase1.png]]

    Extended use case diagram:

    #+attr_html: :width 400px
    [[./img/airport_usecase.png]]

*** Activity diagrams: checking in

    ~Passenger services~ overview (low level of detail):

    #+attr_html: :width 400px
    [[./img/airport_activity1.png]]


    More detail: ~Passenter checks in~:

    #+attr_html: :width 400px
    [[./img/airport_activity2.png]]

    The same diagram but without explanations:

    #+attr_html: :width 400px
    [[./img/airport_activity3.png]]

*** Sequence diagrams: check in and boarding

    Constructing sequence of actions:

    #+attr_html: :width 400px
    [[./img/airport_sequence1.png]]

    The entire sequence spans the business use cases ~check-in~ and
    ~boarding~:

    #+attr_html: :width 400px
    [[./img/airport_sequence2.png]]

*** Package diagram: organisational units

    Constructing a package diagram by collecting organizational
    units/roles:

    #+attr_html: :width 400px
    [[./img/airport_package1.png]]

    Package diagram for the organization unit ~Passenger service~:

    #+attr_html: :width 400px
    [[./img/airport_package1.png]]

*** Class diagram: Passenger services

    Illustration of class "generalization". In OOP terms, ~List of
    checked in passengers~ and ~List of passengers not yet on board~
    inherits attributes and methods from ~Passenger List~.

    #+attr_html: :width 400px
    [[./img/airport_class1.png]]

    Classes of the internal view of the business system:

    #+attr_html: :width 400px
    [[./img/airport_class3.png]]

    Class diagram of ~Passenger services~ including associations
    between them. This way of drawing class diagrams focuses on the
    relationships, not on the methods/functions or abilities of the
    classes.

    #+attr_html: :width 400px
    [[./img/airport_class2.png]]

* Discussion - whaddayathink?

  #+attr_html: :width 400px
  [[./img/learn.gif]]

  * What do you like best? EPC, BPMN, UML? Why?
  * If Germans are so fond of modeling, why can't they seem to build
    an international airport? ([[dw][DW, 2020]]).

* Use case diagrams

  #+attr_html: :width 400px
  [[./img/food.png]]

  Overview: [[https://www.youtube.com/watch?v=WnMQ8HlmeXc&t=3427s][freeCodeCamp.org]] (video, 7 min)

  | PURPOSE                                      | CASE EXAMPLE                               | VIEW        |
  |----------------------------------------------+--------------------------------------------+-------------|
  | Specify the context of a system              | Weblog CMS                                 | Logical     |
  | Capture requirements of a system             | Create new blog account                    | Process     |
  | Validate system architecture                 | Specify successful/failed end condition    | Development |
  | Drive implementation and generate test cases | Program and debug use cases with test data | Physical    |

** Use case elements

   The problem: "Chinese whispers"

   #+attr_html: :width 600px
   [[./img/projects.png]]

   The solution: Use case modeling

   | Focus    | System *requirements* strictly from the outside looking in |
   | Task     | Specify the *value* that the system delivers to *users*.   |
   | Tools    | User *stories*, project canvas, *agile* workflow (Scrum)   |
   | Excluded | Nonfunctional requirements (e.g. performance targets)      |

*** Requirements

    Requirement A.1:

    #+begin_quote
    A content management system (CMS) shall allow an *administrator* to
    *create a new blog account*, provided the personal details of the new
    blogger are *verified* using the *author credentials database*.
    #+end_quote

*** System

    | A system is defined by its boundaries. |

    #+attr_html: :width 400px
    [[./img/cms.png]]

*** Actors

    | Actors are outside our system (CMS)       |
    | Actors don't have to be actual people     |
    | Actors must interact with the system      |
    | Actors cannot be changed by system design |

    #+attr_html: :width 400px
    [[./img/actor.png]]

**** Tricky actors
     Some actors are tricky: is the ~system clock~ an actor?

     Decision process:

     #+attr_html: :width 400px
     [[./img/actorprocess.png]]

**** Generalization

     #+attr_html: :width 400px
     [[./img/generalization.png]]

*** Use cases

    | Use cases must have clear pass/fail criteria            |
    | All actors must know if the system fulfils the use case |
    | Complete use cases have system interaction and output   |
    | Use cases provide measurable results to users           |

    A use case is drawn as an oval with a name that describes the
    interaction that it represents. E.g. for requirement A.1:

    #+attr_html: :width 400px
    [[./img/blog.png]]

*** Communication lines

    | Communication lines are not flow lines     |
    | Communication means purposeful interaction |

    #+attr_html: :width 400px
    [[./img/comm1.png]]

    #+attr_html: :width 400px
    [[./img/comm2.png]]

*** System boundaries

    #+attr_html: :width 400px
    [[./img/boundary.png]]

*** Descriptions

    | Use cases are too simple to be self-explanatory                 |
    | A use case should be accompanied by description                 |
    | Writing/understanding the description requires domain knowledge |

    | DESCRIPTION DETAIL       | MEANING                                                                                | EXAMPLE                                                                     |
    |--------------------------+----------------------------------------------------------------------------------------+-----------------------------------------------------------------------------|
    | Related requirements     | Which requirements this use case fulfils                                               | Requirement A.1                                                             |
    | Goal in context          | The use case's place within the system and why this use case is important              | New or existing author requests a new blog account from the ~Administrator~ |
    | Preconditions            | What needs to happen before the use case can be executed                               | Author needs to have appropriate proof of identity                          |
    | Successful end condition | What the system's condition should be if the use case executes successfully            | A new blog account is created for the author                                |
    | Failed end condition     | What the system's condition should be if the use case fails to execute successfully    | The application for a new blog account is rejected                          |
    | Primary actors           | The main actors that participate in the use case (and triggering or benefiting actors) | ~Administrator~                                                             |
    | Secondary actors         | Actors that participate but are not the main players in a use case's execution         | Author Credentials Database                                                 |
    | Trigger                  | The event triggered by an actor that causes the use case to execute                    | ~Administrator~ asks CMS to ~create a new blog account~                     |
    |--------------------------+----------------------------------------------------------------------------------------+-----------------------------------------------------------------------------|
    | Main flow                | The place to describe each of the important steps in a use case's normal execution     | 1. Admin asks CMS to create new account                                     |
    |                          |                                                                                        | 2. Admin selects an account type                                            |
    |                          |                                                                                        | 3. Admin enters author's details                                            |
    |                          |                                                                                        | 4. Author's details are verified using the Author Credentials Database      |
    |                          |                                                                                        | 5. The new blog account is created                                          |
    |                          |                                                                                        | 6. A summary of the new blog account's details are emailed to the author    |
    |--------------------------+----------------------------------------------------------------------------------------+-----------------------------------------------------------------------------|
    | Extensions               | A description of any alternative steps from the ones described in the ~main flow~      | 4.1 AUthor Credentials Database does not verify the author's details        |
    |                          |                                                                                        | 4.2 The author's new blog account application is rejected                   |

    Improved use case diagram after reviewing the description:

    #+attr_html: :width 400px
    [[./img/boundary2.png]]

*** TODO Relationships

    #+attr_html: :width 300px
    [[./img/underconstruction.gif]]

**** Reuse with ~<<include>>~
**** Optional reuse with ~<<extend>>~


**** Example: as-is and to-be use case diagrams

     Remember "process optimization" in the context of process modeling?
     It also applies to requirements analysis with use case diagrams.

     As-is diagram:

     #+attr_html: :width 400px
     [[./img/asis.png]]

     To-be diagram:

     #+attr_html: :width 400px
     [[./img/tobe.png]]

     (Source: [[monteleone][Monteleone, 2021]]).


*** TODO Overview diagrams

    #+attr_html: :width 300px
    [[./img/underconstruction.gif]]


* Practice

  #+attr_html: :width 600px
  [[./img/standards.png]]

  ([[https://xkcd.com/927][Image: xkcd]]).

  * Find mistakes in a use case diagram
  * Create a use case from simple requirements
  * Create a use case for the term project
  * Transfer a EPC/BPMN into an UML use case diagram
  * "Hello World" as UML ([[hello][Akehurst, 2014]])

** Find mistakes in a use case diagram

*** Simple diagrams

    #+attr_html: :width 200px
    [[./img/error5.png]]

    #+attr_html: :width 200px
    [[./img/error6.png]]


    #+attr_html: :width 400px
    [[./img/error1.png]]

    #+attr_html: :width 400px
    [[./img/error2.png]]

    #+attr_html: :width 400px
    [[./img/error3.png]]

    #+attr_html: :width 400px
    [[./img/error4.png]]

*** TODO Diagrams with relationships



** Create a use case from simple requirements

   1) Fire up Signavio Process Manager
   2) Go to your personal folder in ~Shared Documents~
   3) Create a new ~UML use case diagram~
   4) Sketch a use case description

      #+begin_quote
      A user logs into a computer.
      #+end_quote

** Create a use case for the term project
** Transfer a EPC/BPMN into an UML use case diagram
** "Hello world" as use case diagram

   * It doesn't have to be this complicated: [[hello][Akehurst (2014]])

* References

  <<uml>> Miles/Hamilton: Learning UML 2.0. O'Reilly (2006). ISBN:
  9780596009823. URL: [[https://www.oreilly.com/library/view/learning-uml-20/0596009828/][URL: oreilly.com.]]

  <<packt>> Graessle/Baumann/Baumann: UML 2.0 in Action - a
  Project-based Tutorial. Packt Publishing
  (2005). ISBN: 9781904811558. URL: [[https://www.packtpub.com/product/uml-2-0-in-action-a-project-based-tutorial/9781904811558][URL: packtpub.com]].

  <<omg>> Object Management Group: Unified Modeling Language
  Specifications [website]. [[https://www.omg.org/spec/UML/2.5.1/About-UML/][URL: omg.org.]]

  <<video>> freeCodeCamp.org (21 Apr 2021). UML Diagrams Full Course
  (Unified Modeling Language) [video]. [[https://youtu.be/WnMQ8HlmeXc][URL: youtu.be/WnMQ8HlmeXc.]]

  <<creately>> Creately.com (10 Sept 2021). UML Diagram Types Guide:
  Learn about All Types of UML Diagrams with Examples [blog]. [[https://creately.com/blog/diagrams/uml-diagram-types-examples][URL:
  creately.com]].

  <<hello>> Akehurst (17 Aug 2014). Examples: UML: Simple Hello
  World. [[http://dhakehurst.blogspot.com/2014/08/examples-uml-hello-world-part-1.html][URL: dhakehurst.blogspot.com.]]

  <<dw>> DW (31 Oct 2020). Berlin's new airport finally opens: A story
  of failure and embarrassment [blog]. URL: [[https://www.dw.com/en/berlins-new-airport-finally-opens-a-story-of-failure-and-embarrassment/a-55446329][URL: www.dw.com.]]

  <<monteleone>> Monteleone (2021). Generalization/Specialization Use
  Case Diagrams and Scenarios [blog]. URL: [[https://modernanalyst.com/Resources/Articles/tabid/115/ID/5465/Generalization-Specialization-Use-Case-Diagrams-and-Scenarios.aspx][URL: modernanalyst.com.]]

* Footnotes

[fn:2]Since 2017: UML 2.5.1 ([[omg][OMG]])

[fn:1]
#+begin_example
UML 0.9 =
+ Booch Method (Grady Booch)
+ Object Modeling Technique (James Rumbaugh)
+ Object-Oriented Software Engineering (Ivar Jacobsen)
+ Others
#+end_example
